int lengthOfLongestSubstring(char * s){
    char *str = NULL, *str_tmp = NULL;
    int len_str = 0, len_s = 0;
    unsigned int i, j, k = 0;
    
    len_s = strlen(s);
    for (i = 0; i < len_s; i++) {  //遍历字符串,前n个字符
        for (j = k; j < i; j++) {  //前n-1个字符
            if (s[i] == s[j]) {
                k = j + 1;
                break;
            }
        } 
        if(i - k + 1 > len_str)
            len_str = i - k + 1;
    }
    return len_str;
}

int lengthOfLongestSubstring(char * s)
{
    int start = 0, end = 0, maxlen = 0, i = 0;
    char map[256] = {0};
    map[(int)*(s+start)] = 1;
    
    while( *(s+end) != 0 )
    {
        maxlen = maxlen > (end-start+1) ? maxlen : (end-start+1);
        ++end;
        while( 0 != map[ (int)*(s+end) ] )//将要加入的新元素与map内元素冲突
        {
            map[ (int)*(s+start) ] = 0;
               ++start;
        }
        map[(int)*(s+end)] = 1;
    }
    
    return maxlen;
}
